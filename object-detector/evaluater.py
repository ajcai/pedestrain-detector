from __future__ import print_function
from __future__ import division
xrange=range
import os
import numpy as np
import glob
from matplotlib import pyplot as plt
from sklearn.externals import joblib
from config import *
from nms import IOU
from annotationutil import get_all_person,normlize_locs

def judge_true_false(dect,imgid,norm_locs):
    annotations=norm_locs.get(imgid,[])
    for loc in annotations:
        iou=IOU(loc,dect[:4])
        if iou>iou_threshold:
            return 'T'
    return 'F'
def count_FTPN(detections,norm_locs,threshold=0):
    evaluations={'TP':0,'FP':0,'TN':0,'FN':0}
    for imgid,det in detections.items():
        for dt in det:
            if dt[4]>threshold:
                flag=judge_true_false(dt[:4],imgid,norm_locs)+'P'
            else:
                flag=judge_true_false(dt[:4],imgid,norm_locs)+'N'
            evaluations[flag]+=1
    return evaluations
def compute_MR_FPPW(dets_path,visualize=False):
    mr_fppw_grp={}
    obj_pos=get_all_person(test_annotation_path)
    norm_locs=normlize_locs(obj_pos)

    for det_path in glob.glob(dets_path):
    	det_name=os.path.split(det_path)[-1].split(".")[0]
        mr_fppw=[]
        detections=joblib.load(det_path)
        for th in np.arange(-2,2,0.2):
            evaluations=count_FTPN(detections,norm_locs,th)
            #print(evaluations)
            mr=evaluations['FN']/(evaluations['TP']+evaluations['FN'])
            fppw=evaluations['FP']/(evaluations['TP']+evaluations['TN']+evaluations['FP']+evaluations['FN'])
            mr_fppw.append((mr,fppw))
        mr_fppw_grp[det_name]=mr_fppw
        if visualize:
            mr=[x[0] for x in mr_fppw]
            fppw=[x[1] for x in mr_fppw]
            plt.figure('norm')
            plt.plot(fppw,mr,label=det_name)
    if visualize:
    	plt.legend()
        plt.show()
    return mr_fppw_grp

if __name__ == '__main__':
    mr_fppw=compute_MR_FPPW('../data/detections/detections_orient_*.data',True)
    # print(mr_fppw)


    # mr_fppw_grp={'detections_norm_L2-Hys': [(0.9940720652659745, 0.14795104999369202), (0.9949342499374778, 0.1177109258218547), (0.9956318006045453, 0.09103258618690258), (0.9962747608501208, 0.06850095384462464), (0.996850696215289, 0.050666544329881144), (0.9973315178577388, 0.037626207597878984), (0.9977641894591456, 0.028614064397574163), (0.9981617622887768, 0.022337932431864146), (0.9984780615586116, 0.01822818104315048), (0.9987406331323223, 0.01547305468581747), (0.9989750277107649, 0.013479984554980827), (0.9991470343491221, 0.011963518151083381), (0.9992871173784652, 0.010806416054664154), (0.9993994985422892, 0.009872323723523962), (0.9994973510269235, 0.00905801949487651), (0.9995703374473631, 0.008411928346325245), (0.9996120802617615, 0.007853766762369714), (0.9996576648071641, 0.007304525569025345), (0.9997018825469082, 0.006835567891181429), (0.9997382724687255, 0.006434150313679164)],
    #  'detections_norm_L1-sqrt': [(0.9884263909943806, 0.36903146221768557), (0.9910288333787933, 0.27204005510252716), (0.9930122466428607, 0.1845654304279621), (0.994521962777699, 0.11357313891979168), (0.9957270045918961, 0.06260712433367868), (0.9966902296161488, 0.031483881491336387), (0.9974965675594272, 0.014801476706948601), (0.9981352530349048, 0.006784594230546221), (0.998632938949117, 0.002951374950778559), (0.9990056735853067, 0.0012858105895231287), (0.9993202043506921, 0.0005938431464001764), (0.9995481334435321, 0.00027398342591424446), (0.9996987525264879, 0.00013508020068330191), (0.9998120320112059, 7.64604909528124e-05), (0.9998751145855864, 3.440722092876558e-05), (0.9999175994664565, 1.529209819056248e-05), (0.9999510734863359, 6.371707579401034e-06), (0.9999832615080351, 2.5486830317604135e-06), (0.9999896993365085, 1.2743415158802067e-06), (0.9999974248175483, 0.0)], 
    #  'detections_norm_L2': [(0.9916304006089388, 0.22602995467167228), (0.9932387385878979, 0.15815342816982894), (0.9945189379008851, 0.1055040084412382), (0.9956084302748991, 0.06636770614704117), (0.9964627749169835, 0.039815526322161184), (0.9971942671057715, 0.022727880935723487), (0.9978010453492109, 0.012469431732887823), (0.9983306265326855, 0.0066100094428706326), (0.9987237787504646, 0.0034241556531701156), (0.9990374232322478, 0.0017165380218906385), (0.9992839978674469, 0.0008461627665444573), (0.9994798513198773, 0.00043964782297867136), (0.9996395213358309, 0.0002255584483107966), (0.9997541042700888, 0.00010322166278629675), (0.9998455037735703, 5.6071026698729096e-05), (0.999906012254457, 2.293814728584372e-05), (0.9999343357221396, 1.91151227382031e-05), (0.999956222969293, 1.6566439706442688e-05), (0.9999716736495412, 2.5486830317604135e-06), (0.9999819739781499, 1.2743415158802067e-06)], 
    #  'detections_norm_L1': [(0.8956189472297252, 0.9030863277173102), (0.944524023753824, 0.8224905985454666), (0.9705581722434828, 0.6872001315120444), (0.9837558824128588, 0.49740735218594173), (0.9904785380273733, 0.28817576737660233), (0.9940781141750178, 0.12847528860649482), (0.9962418054404341, 0.04620634902430042), (0.9976851066937585, 0.014837158269393249), (0.9985982944408487, 0.004676833363280359), (0.999196000618461, 0.0014603953771987169), (0.999518443981773, 0.0004676833363280359), (0.9997373581057855, 0.00015674400645326544), (0.9998802609538696, 5.861970973048951e-05), (0.9999381974514174, 2.9309854865244755e-05), (0.999970385935637, 8.920390611161447e-06), (0.9999884117237303, 5.097366063520827e-06), (0.9999961372312961, 0.0), (0.9999974248175483, 0.0), (1.0, 0.0), (1.0, 0.0)]}
    # plot_list=[]
    # legend_list=[]
    # for i in mr_fppw_grp.keys():
    #     mr_fppw=mr_fppw_grp[i]
    #     mr=[x[0] for x in mr_fppw]
    #     fppw=[x[1] for x in mr_fppw]
    #     plt.figure('norm')
    #     pt=plt.plot(fppw,mr,label=i)
    #     plot_list.append(pt)
    #     legend_list.append(i)
    # plt.legend()
    # plt.show()
